pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        DOCKER_HUB_CREDS = credentials('docker-creds')
        DOCKER_IMAGE = "kastrov/leave-management"
        DOCKER_TAG = "${BUILD_NUMBER}"
        EKS_CLUSTER = "kastro-eks"
        AWS_REGION = "us-east-1"
        K8S_NAMESPACE = "leave-management"
        MYSQL_WAIT_TIMEOUT = "300"
        APP_WAIT_TIMEOUT = "300"
    }

    stages {
        stage('Git Clone') {
            steps {
                git branch: 'master', url: 'https://github.com/KastroVKiran/leave-app-kastro.git'
            }
        }

        stage('Build Project') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Prepare Docker Assets') {
            steps {
                sh '''
                    wget -q https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh -O wait-for-it.sh
                    chmod +x wait-for-it.sh
                    sed -i 's/\r$//' wait-for-it.sh
                '''
            }
        }

        stage('Create Docker Image') {
            steps {
                script {
                    sh "docker build --no-cache -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    retry(3) {
                        sh """
                            echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }

        stage('Configure AWS EKS Access') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-eks-creds',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh """
                        aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                        aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                        aws configure set region ${AWS_REGION}
                        aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER}
                        kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        kubectl config set-context --current --namespace=${K8S_NAMESPACE}
                        kubectl cluster-info
                        kubectl get nodes
                    """
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                dir('k8s') {
                    script {
                        sh """
                            kubectl apply -f ebs-sc.yml -n ${K8S_NAMESPACE}
                            kubectl apply -f mysql-secret.yml -n ${K8S_NAMESPACE}
                            kubectl apply -f mysql-pvc.yml -n ${K8S_NAMESPACE}
                            kubectl apply -f mysql-deployment.yml -n ${K8S_NAMESPACE}
                            kubectl apply -f mysql-service.yml -n ${K8S_NAMESPACE}
                        """

                        sh """
                            kubectl patch deployment mysql -n ${K8S_NAMESPACE} --type=json \
                                -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/env/2"}]' || true
                            kubectl patch deployment mysql -n ${K8S_NAMESPACE} --type=json \
                                -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/env/3"}]' || true
                        """

                        timeout(time: 10, unit: 'MINUTES') {
                            sh """
                                kubectl rollout status deployment/mysql -n ${K8S_NAMESPACE}
                                kubectl wait --for=condition=Ready pod -l app=mysql --timeout=600s -n ${K8S_NAMESPACE}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                dir('k8s') {
                    script {
                        sh """
                            sed -i "s|image:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g" deployment.yml
                            kubectl apply -f deployment.yml -n ${K8S_NAMESPACE}
                            kubectl apply -f service.yml -n ${K8S_NAMESPACE}
                        """
                    }
                }

                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        sh """
                            kubectl rollout status deployment/leave-management-app --timeout=${APP_WAIT_TIMEOUT}s -n ${K8S_NAMESPACE}
                            for i in {1..10}; do
                                kubectl get pods -l app=leave-management -n ${K8S_NAMESPACE} | grep -q 'Running' && break || sleep 10
                            done
                        """
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    def appUrl = sh(returnStdout: true, script: """
                        kubectl get svc leave-management-service -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
                    """).trim()
                    echo "##[success] Application deployed: http://${appUrl}:8090"
                }
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'
        }
        failure {
            steps {
                sh """
                    kubectl get pods -n ${K8S_NAMESPACE} > k8s-logs/failure.log
                    kubectl logs -l app=mysql -n ${K8S_NAMESPACE} --tail=50 >> k8s-logs/failure.log
                """
            }
        }
    }
}
